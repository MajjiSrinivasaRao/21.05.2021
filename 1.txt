// program to findout minimum no. of possible ways to reach from starting point to ending point by using BFS.

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

void find(int n,int start,int end,int a[])
{
	queue<pair<int,int>>q; // queue created and maintain two values one is starting position second one is no. of steps 
	q.push({start,0});

	int varr[100000]={0};// intially filled with 0 in all positions
	varr[start]=1;

	while(!q.empty())
	{
	auto it=q.front();
	int num=it.first;
	int steps=it.second;
	q.pop();

		for(int i=0;i<n;i++)
		{
		int res=(num*a[i]%100000);

			if(res==end) // compare result with end if it is true stop here and print result
			{
			cout<<steps+1;
			return;
			}

			if(!varr[res]) // update array value
			{
			varr[res]=1;
			q.push({res,steps+1});
			}
		}
	}
}

int main()
{


	int n;// for no. of elements
	cin>>n;

	int start;  // reading starting position
	cin>>start;

	int end;	// reading ending position
	cin>>end;

	int a[n];
	for(int i=0;i<n;i++) // reading elements into array 
	cin>>a[i];

	
	find(n,start,end,a); // function call
	
return 0;
}
